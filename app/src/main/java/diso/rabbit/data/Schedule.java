package diso.rabbit.data;

import diso.rabbit.data.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table SCHEDULE.
 */
public class Schedule {

    private Long id;
    /** Not-null value. */
    private java.util.Date StartHour;
    private java.util.Date EndHour;
    private Long IdDay;
    private Long IdCourse;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ScheduleDao myDao;

    private Day day;
    private Long day__resolvedKey;

    private Course course;
    private Long course__resolvedKey;


    public Schedule() {
    }

    public Schedule(Long id) {
        this.id = id;
    }

    public Schedule(Long id, java.util.Date StartHour, java.util.Date EndHour, Long IdDay, Long IdCourse) {
        this.id = id;
        this.StartHour = StartHour;
        this.EndHour = EndHour;
        this.IdDay = IdDay;
        this.IdCourse = IdCourse;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getScheduleDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public java.util.Date getStartHour() {
        return StartHour;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setStartHour(java.util.Date StartHour) {
        this.StartHour = StartHour;
    }

    public java.util.Date getEndHour() {
        return EndHour;
    }

    public void setEndHour(java.util.Date EndHour) {
        this.EndHour = EndHour;
    }

    public Long getIdDay() {
        return IdDay;
    }

    public void setIdDay(Long IdDay) {
        this.IdDay = IdDay;
    }

    public Long getIdCourse() {
        return IdCourse;
    }

    public void setIdCourse(Long IdCourse) {
        this.IdCourse = IdCourse;
    }

    /** To-one relationship, resolved on first access. */
    public Day getDay() {
        Long __key = this.IdDay;
        if (day__resolvedKey == null || !day__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DayDao targetDao = daoSession.getDayDao();
            Day dayNew = targetDao.load(__key);
            synchronized (this) {
                day = dayNew;
            	day__resolvedKey = __key;
            }
        }
        return day;
    }

    public void setDay(Day day) {
        synchronized (this) {
            this.day = day;
            IdDay = day == null ? null : day.getId();
            day__resolvedKey = IdDay;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Course getCourse() {
        Long __key = this.IdCourse;
        if (course__resolvedKey == null || !course__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CourseDao targetDao = daoSession.getCourseDao();
            Course courseNew = targetDao.load(__key);
            synchronized (this) {
                course = courseNew;
            	course__resolvedKey = __key;
            }
        }
        return course;
    }

    public void setCourse(Course course) {
        synchronized (this) {
            this.course = course;
            IdCourse = course == null ? null : course.getId();
            course__resolvedKey = IdCourse;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
