package diso.rabbit.data;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import diso.rabbit.data.CourseDao;
import diso.rabbit.data.AlarmDao;
import diso.rabbit.data.DayDao;
import diso.rabbit.data.ScheduleDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 1000): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 2100;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        CourseDao.createTable(db, ifNotExists);
        AlarmDao.createTable(db, ifNotExists);
        DayDao.createTable(db, ifNotExists);
        ScheduleDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        CourseDao.dropTable(db, ifExists);
        AlarmDao.dropTable(db, ifExists);
        DayDao.dropTable(db, ifExists);
        ScheduleDao.dropTable(db, ifExists);
    }

    public static void insertDays(SQLiteDatabase db){
        db.execSQL("INSERT INTO Day VALUES (NULL, 'LU')");
        db.execSQL("INSERT INTO Day VALUES (NULL, 'MA')");
        db.execSQL("INSERT INTO Day VALUES (NULL, 'MI')");
        db.execSQL("INSERT INTO Day VALUES (NULL, 'JU')");
        db.execSQL("INSERT INTO Day VALUES (NULL, 'VI')");
        db.execSQL("INSERT INTO Day VALUES (NULL, 'SA')");
        db.execSQL("INSERT INTO Day VALUES (NULL, 'DO')");
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
            insertDays(db);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            //dropAllTables(db, true);
            //onCreate(db);
            updateDays(db);
        }

        public void updateDays(SQLiteDatabase db){
            db.execSQL("UPDATE Day SET name = 'LU' WHERE name = 'Lunes'");
            db.execSQL("UPDATE Day SET name = 'MA' WHERE name = 'Martes'");
            db.execSQL("UPDATE Day SET name = 'MI' WHERE name = 'Miercoles'");
            db.execSQL("UPDATE Day SET name = 'JU' WHERE name = 'Jueves'");
            db.execSQL("UPDATE Day SET name = 'VI' WHERE name = 'Viernes'");
            db.execSQL("UPDATE Day SET name = 'SA' WHERE name = 'Sabado'");
            db.execSQL("UPDATE Day SET name = 'DO' WHERE name = 'Domingo'");
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(CourseDao.class);
        registerDaoClass(AlarmDao.class);
        registerDaoClass(DayDao.class);
        registerDaoClass(ScheduleDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
